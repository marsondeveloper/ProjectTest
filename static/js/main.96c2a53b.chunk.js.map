{"version":3,"sources":["components/AnswersComponents/TextInput.jsx","components/AnswersComponents/RadioButton.jsx","components/ModalWindow/ModalWindow.jsx","components/AnswersComponents/Checkbox.jsx","components/AnswersComponents/Select.jsx","components/PageQuestions/PageQuestions.jsx","components/ResultPage/ResultPage.jsx","components/MainComponent/MainComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["TextInput","props","useState","textInput","setInput","type","placeholder","name","value","onChange","e","answer","cost","target","pointText","addPoint","index","onChangeText","answers","point","RadioButton","setRadio","onChangeRadio","result","map","q","i","key","Modal","isOpenModal","className","title","children","to","onClick","setIsCloseModal","defaultProps","Checkbox","setChecked","checked","checkpoint","addPointCheckbox","onChangeCheckbox","Select","select","setSelect","onChangeSelect","PageQuestions","state","pointsCheckbox","arr","setState","reduce","a","currentItem","questions","dataJson","data","question","answersArr","this","redirect","Component","ResultPage","rightAnswers","filter","totalScores","MainComponent","points","storageState","totalPoints","setIsOpenModal","redirectPageResult","undefined","length","path","render","addInStorageState","React","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96c2a53b.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\n\r\nconst TextInput = (props) => {\r\n\r\n    const [textInput, setInput] = useState( '');\r\n\r\n   let onChangeText = ({target: {value}}, answer, cost) => {\r\n        setInput([value]);\r\n        const pointText = value === answer ? cost : 0;\r\n        props.addPoint(props.index, pointText)\r\n    };\r\n\r\n   let onChange = (e) => {\r\n      onChangeText(e, props.answers[0].answer, props.answers[0].point)\r\n    };\r\n\r\n        if (props.type !== \"text\") {\r\n            return null\r\n        }\r\n        return (\r\n            <div>\r\n\r\n                <div><p><input placeholder={\"Введите ответ\"} name=\"textInput\" type={props.type} value={textInput}\r\n                               onChange={onChange}/></p></div>\r\n\r\n            </div>\r\n        )\r\n    };\r\n\r\n\r\n\r\nexport default TextInput;","import React, {useState} from \"react\";\r\n\r\n\r\nconst RadioButton = (props) => {\r\n\r\n    const [radiobutton, setRadio] = useState( '');\r\n\r\n   let onChangeRadio = ({target: {value}}) => {\r\n       setRadio([value]);\r\n        props.addPoint(props.index, +value)\r\n    };\r\n\r\n        if (props.type !== \"radio\") {\r\n            return null\r\n        }\r\n\r\n        let result = props.answers.map((q, i) => <div key={i}><label><input name={props.name} type={props.type} value={q.point} onChange={onChangeRadio}/>{q.answer}\r\n        </label></div>);\r\n        return (\r\n            <div>\r\n                <div>{result}</div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n\r\n\r\nexport default RadioButton;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport './Modal.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Modal = (props) => {\r\n    return (\r\n        <>\r\n            {props.isOpenModal &&\r\n            <div className='modalOverlay'>\r\n                <div className='modalWindow'>\r\n                    <div className='modalHeader'>\r\n                        <div className='modalTitle'>{props.title}</div>\r\n                    </div>\r\n                    <div className='modalBody'>\r\n                        {props.children}\r\n                    </div>\r\n                    <div className='modalFooter'>\r\n                        <NavLink to={'/result'}>\r\n                            <button className='btn'>Да</button>\r\n                        </NavLink>\r\n                        <button className='btn' onClick={props.setIsCloseModal}>Нет</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nModal.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nModal.defaultProps = {\r\n    title: \"Каждый не отвеченный ответ считается неправильным, Вы уверены что хотите продолжить?\",\r\n    children: \"Хорошо подумайте!\"\r\n};\r\n\r\n\r\nexport default Modal;\r\n","import React, {useState} from \"react\";\r\n\r\nconst Checkbox = (props) => {\r\n\r\n    const [box, setChecked] = useState([]);\r\n\r\n    let onChangeCheckbox = ({target: {checked}}, i, point) => {\r\n        setChecked([checked]);\r\n        let checkpoint = checked ? point : 0;\r\n        props.addPointCheckbox(checkpoint, i, props.index)\r\n    };\r\n\r\n    if (props.type !== \"checkbox\") {\r\n        return null\r\n    }\r\n\r\n    let result = props.answers.map((q, i) => <div key={i}><label><input type={props.type} name=\"checkbox\" value={q.answer}\r\n                                                                         onChange={(e) => onChangeCheckbox(e, i, q.point)}/>{q.answer}\r\n    </label><br/></div>);\r\n\r\n    return (\r\n        <div>\r\n            {result}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Checkbox;","import React, {useState} from \"react\";\r\n\r\n\r\n\r\nconst Select = (props) => {\r\n\r\n    const [select, setSelect] = useState('');\r\n\r\n   let onChangeSelect = ({target: {value}}) => {\r\n        setSelect([value]);\r\n        props.addPoint(props.index, +value)\r\n    };\r\n\r\n   let onChange = (e) => {\r\n        onChangeSelect(e)\r\n    };\r\n\r\n        if (props.type !== \"select\") {\r\n            return null\r\n        }\r\n\r\n        let result = props.answers.map((q, i) => <option key={i} value={q.point}>{q.answer}</option>);\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <select name=\"select\" value={select} onChange={onChange}>\r\n                        {result}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n\r\n\r\nexport default Select;","import React, {Component} from \"react\";\r\nimport TextInput from \"../AnswersComponents/TextInput\";\r\nimport RadioButton from \"../AnswersComponents/RadioButton\";\r\nimport Modal from \"../ModalWindow/ModalWindow\";\r\nimport Checkbox from \"../AnswersComponents/Checkbox\";\r\nimport Select from \"../AnswersComponents/Select\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport dataJson from \"../../JSON/tsconfig\";\r\n\r\nclass PageQuestions extends Component {\r\n\r\n    state = {\r\n        pointsCheckbox: []\r\n    };\r\n\r\n    addPointCheckbox = (checkpoint, i, index) => {\r\n        const arr = [...this.state.pointsCheckbox];\r\n        arr[i] = checkpoint;\r\n            this.setState({pointsCheckbox: arr}\r\n            );\r\n            let point = arr.reduce((a,currentItem) => typeof currentItem === 'number' ? a + currentItem : a, 0);\r\n            this.props.addPoint(index, point)\r\n        };\r\n\r\n\r\n         questions = dataJson.data.map((e, i) => <div key={i}  className=\"container\">\r\n\r\n                <strong>{++i+\".\"}{e.question}</strong>\r\n\r\n                <TextInput addPoint={this.props.addPoint} index={i} type={e.type} answers={e.answersArr} />\r\n\r\n                <RadioButton type={e.type} name={e.name} answers={e.answersArr} index={i} addPoint={this.props.addPoint} />\r\n\r\n                <Checkbox type={e.type} answers={e.answersArr} index={i} addPointCheckbox={this.addPointCheckbox} />\r\n\r\n                <Select type={e.type} answers={e.answersArr} index={i} addPoint={this.props.addPoint} />\r\n            </div>\r\n        );\r\n         \r\n\r\n    render() {\r\n\r\n        if (this.props.state.redirect) {\r\n            return <Redirect to={'/result'}/>\r\n        }\r\n\r\n        return (\r\n\r\n            <div>\r\n                {this.questions}\r\n                <div className=\"container\">\r\n                    <button className='btn' onClick={this.props.result}>Ответить</button>\r\n                </div>\r\n                <Modal isOpenModal={this.props.state.isOpenModal} setIsCloseModal={this.props.setIsCloseModal}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default PageQuestions;","import React from \"react\";\r\nimport './ResultPage.css';\r\nimport dataJson from \"../../JSON/tsconfig\";\r\n\r\n\r\n\r\nconst ResultPage = (props) => {\r\n\r\n    let rightAnswers = dataJson.data.map((e,i) => e.answersArr.filter(a => a.point > 0).map(e => <h3>{i+1}.{e.answer}</h3>));\r\n\r\n        return (\r\n            <div>\r\n                {props.totalScores === 7 ? <div className={\"win\"}><p>{\"Тест пройден\"}</p><br/>{props.totalScores + \" баллов\"}</div> :\r\n                    <div><div className={\"test\"}><p>{\"Тест не пройден \"}</p><br/>{\"Ваш результат - \" + props.totalScores + \" балла из 7\"}</div><div><h2>{\"Правильные ответы:\"}</h2>{rightAnswers}</div></div>}\r\n\r\n\r\n            </div>\r\n        )\r\n    };\r\n\r\n\r\n\r\n\r\nexport default ResultPage;","import React from 'react';\r\nimport PageQuestions from \"../PageQuestions/PageQuestions\";\r\nimport {Route} from \"react-router-dom\";\r\nimport ResultPage from \"../ResultPage/ResultPage\";\r\nimport dataJson from \"../../JSON/tsconfig\"\r\n\r\n\r\nclass MainComponent extends React.Component {\r\n\r\n    state = {\r\n        points: [],\r\n        totalScores: 0,\r\n        isOpenModal: false,\r\n        redirect: false,\r\n        storageState: []\r\n    };\r\n\r\n        addPoint = (i, point) => {\r\n            const arr = [...this.state.points];\r\n            arr[i] =  point;\r\n            this.setState({points: arr});\r\n            this.totalPoints()\r\n        };\r\n       totalPoints = () => {\r\n            this.setState((state) => {\r\n               return { totalScores: state.points.reduce((a,currentItem) => typeof currentItem === 'number' ? a + currentItem : a, 0)}\r\n            })\r\n        };\r\n       setIsOpenModal = () => {\r\n           this.setState({\r\n               isOpenModal: true\r\n           });\r\n       };\r\n       redirectPageResult = () => {\r\n           this.setState({\r\n               redirect: true\r\n           });\r\n       };\r\n    result = () => {\r\n        let filterPoints = this.state.points.filter((value) => value !== undefined);\r\n        filterPoints.length === dataJson.data.length ? this.redirectPageResult() : this.setIsOpenModal();\r\n        };\r\n    setIsCloseModal = () => {\r\n        this.setState({\r\n            isOpenModal: false\r\n        })\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Route path='/test' render={() => <PageQuestions state={this.state} addPoint={this.addPoint}\r\n                                                                 setIsCloseModal={this.setIsCloseModal}\r\n                                                                 result={this.result}\r\n                                                                 addInStorageState={this.addInStorageState}/>}/>\r\n\r\n                <Route path='/result' render={() => <ResultPage totalScores={this.state.totalScores}/>}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MainComponent;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Redirect} from \"react-router-dom\";\nimport MainComponent from \"./components/MainComponent/MainComponent\";\n\n\n\nconst App = () => {\n\n        return (\n            <BrowserRouter>\n                 <Redirect to={'/test'}/>\n            <div className=\"app-wrapper\">\n                    <div className='header'><h1>Тест по Всемирной истории</h1></div>\n                    <div className='app-wrapper-content'>\n                        <MainComponent/>\n                    </div>\n                </div>\n            </BrowserRouter>\n        );\n    };\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}